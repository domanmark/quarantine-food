{"version":3,"sources":["logo.png","components/add-ingredient.component.js","components/edit-ingredient.component.js","components/ingredients-list.component.js","components/delete-ingredient.component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CreateIngredient","props","state","ingredient_name","ingredient_quantity","ingredient_units","onChangeIngredientName","bind","onChangeIngredientQuantity","onChangeIngredientUnits","onSubmit","e","this","setState","target","value","preventDefault","console","log","newIngredient","axios","post","then","res","data","cogoToast","success","style","marginTop","className","type","onChange","name","id","checked","to","marginRight","Component","EditIngredient","get","match","params","response","catch","error","obj","align","Ingredient","ingredient","_id","IngredientsList","ingredients","map","currentIngredient","i","key","ingredientList","DeleteIngredient","delete","App","class","href","src","logo","width","height","alt","path","exact","component","AddIngredient","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.43cb2a97.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b620f02b.png\";","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\n\nexport default class CreateIngredient extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ingredient_name: '',\n            ingredient_quantity: '',\n            ingredient_units: ''\n        }\n\n        this.onChangeIngredientName = this.onChangeIngredientName.bind(this);\n        this.onChangeIngredientQuantity = this.onChangeIngredientQuantity.bind(this);\n        this.onChangeIngredientUnits = this.onChangeIngredientUnits.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onChangeIngredientName(e) {\n        this.setState({\n            ingredient_name: e.target.value\n        });\n    }\n\n    onChangeIngredientQuantity(e) {\n        this.setState({\n            ingredient_quantity: e.target.value\n        });\n    }\n\n    onChangeIngredientUnits(e) {\n        this.setState({\n            ingredient_units: e.target.value\n        });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        \n        console.log(`Form submitted:`);\n        console.log(`Ingredient Name: ${this.state.ingredient_name}`);\n        console.log(`Ingredient Quantity: ${this.state.ingredient_quantity}`);\n        console.log(`Ingredient Units: ${this.state.ingredient_units}`);\n\n     \n        const newIngredient = {\n            ingredient_name: this.state.ingredient_name,\n            ingredient_quantity: this.state.ingredient_quantity,\n            ingredient_units: this.state.ingredient_units\n        };\n\n        axios.post('http://localhost:4000/ingredients/add', newIngredient)\n            .then(res => console.log(res.data));\n            cogoToast.success('Ingredient added!');\n\n        this.setState({\n            ingredient_name: '',\n            ingredient_quantity: '',\n            ingredient_units: ''\n        })\n\n    }\n\n    render() {\n        return (\n            <div style={{marginTop: 10}}>\n                <h3>Add New Ingredient</h3>\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\"> \n                        <label>Name: </label>\n                        <input  type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.ingredient_name}\n                                onChange={this.onChangeIngredientName}\n                                />\n                    </div>\n\n                    <div className=\"form-group\"> \n                        <label>Quantity: </label>\n                        <input  type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.ingredient_quantity}\n                                onChange={this.onChangeIngredientQuantity}\n                                />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <div className=\"form-check form-check-inline\">\n                            <input  className=\"form-check-input\" \n                                    type=\"radio\" \n                                    name=\"unitOptions\" \n                                    id=\"unitPounds\" \n                                    value=\"Pounds\"\n                                    checked={this.state.ingredient_units==='Pounds'} \n                                    onChange={this.onChangeIngredientUnits}\n                                    />\n                            <label className=\"form-check-label\">Pounds</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input  className=\"form-check-input\" \n                                    type=\"radio\" \n                                    name=\"unitOptions\" \n                                    id=\"unitJars\" \n                                    value=\"Jars\" \n                                    checked={this.state.ingredient_units==='Jars'} \n                                    onChange={this.onChangeIngredientUnits}\n                                    />\n                            <label className=\"form-check-label\">Jars</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input  className=\"form-check-input\" \n                                    type=\"radio\" \n                                    name=\"unitOptions\" \n                                    id=\"unitBags\" \n                                    value=\"Bags\" \n                                    checked={this.state.ingredient_units==='Bags'} \n                                    onChange={this.onChangeIngredientUnits}\n                                    />\n                            <label className=\"form-check-label\">Bags</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input  className=\"form-check-input\" \n                                    type=\"radio\" \n                                    name=\"unitOptions\" \n                                    id=\"unitBoxes\" \n                                    value=\"Boxes\" \n                                    checked={this.state.ingredient_units==='Boxes'} \n                                    onChange={this.onChangeIngredientUnits}\n                                    />\n                            <label className=\"form-check-label\">Boxes</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input  className=\"form-check-input\" \n                                    type=\"radio\" \n                                    name=\"unitOptions\" \n                                    id=\"unitCans\" \n                                    value=\"Cans\" \n                                    checked={this.state.ingredient_units==='Cans'} \n                                    onChange={this.onChangeIngredientUnits}\n                                    />\n                            <label className=\"form-check-label\">Cans</label>\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <input type=\"submit\" value=\"Add Ingredient\" className=\"btn btn-primary\" />\n                    </div>\n                    <Link to={\"/\"} style={{marginRight: '1em'}}>Back to list</Link>\n                </form>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport cogoToast from 'cogo-toast';\n\n\nexport default class EditIngredient extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ingredient_name: '',\n            ingredient_quantity: 0\n        }\n\n        this.onChangeIngredientName = this.onChangeIngredientName.bind(this);\n        this.onChangeIngredientQuantity = this.onChangeIngredientQuantity.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        axios.get('http://localhost:4000/ingredients/'+this.props.match.params.id)\n            .then(response => {\n                this.setState({\n                    ingredient_name: response.data.ingredient_name,\n                    ingredient_quantity: response.data.ingredient_quantity\n                })   \n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n    }\n\n    onChangeIngredientName(e) {\n        this.setState({\n            ingredient_name: e.target.value\n        });\n    }\n\n    onChangeIngredientQuantity(e) {\n        this.setState({\n            ingredient_quantity: e.target.value\n        });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const obj = {\n            ingredient_name: this.state.ingredient_name,\n            ingredient_quantity: this.state.ingredient_quantity,\n        };\n        console.log(obj);\n        axios.post('http://localhost:4000/ingredients/update/'+this.props.match.params.id, obj)\n            .then(res => console.log(res.data));\n        cogoToast.success('Ingredient updated!');\n    }\n\n    render() {\n        return (\n            <div>\n                <h3 align=\"center\">Update Ingredient</h3>\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\"> \n                        <label>Name: </label>\n                        <input  type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.ingredient_name}\n                                onChange={this.onChangeIngredientName}\n                                />\n                    </div>\n\n                    <div className=\"form-group\"> \n                        <label>Quantity: </label>\n                        <input  type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.ingredient_quantity}\n                                onChange={this.onChangeIngredientQuantity}\n                                />\n                    </div>\n\n                    <br />\n\n                    <div className=\"form-group\">\n                        <input type=\"submit\" value=\"Update Ingredient\" className=\"btn btn-primary\" style={{marginRight: 10 + 'px'}}/>\n                    </div>\n                    <Link to={\"/\"} style={{marginRight: '1em'}}>Back to list</Link>\n                </form>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Ingredient = props => (\n    <tr>\n        <td>{props.ingredient.ingredient_name}</td>\n        <td>{props.ingredient.ingredient_quantity}</td>\n        <td>{props.ingredient.ingredient_units}</td>\n        <td>\n            <Link to={\"/edit/\"+props.ingredient._id} style={{marginRight: '1em'}}>Edit</Link>\n            <Link to={\"/delete/\"+props.ingredient._id}>Remove</Link>\n        </td>\n    </tr>\n)\n\nexport default class IngredientsList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {ingredients: []};\n    }\n\n    componentDidMount() {\n        axios.get('http://localhost:4000/ingredients/')\n            .then(response => {\n                this.setState({ ingredients: response.data });\n            })\n            .catch(function (error){\n                console.log(error);\n            })\n    }\n\n    ingredientList() {\n        return this.state.ingredients.map(function(currentIngredient, i){\n            return <Ingredient ingredient={currentIngredient} key={i} />;\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Ingredients List</h3>\n                <table className=\"table table-striped\" style={{ marginTop: 20 }} >\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Quantity</th>\n                            <th>Units</th>\n                            <th>Edit / Remove</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { this.ingredientList() }\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\n\n\nexport default class DeleteIngredient extends Component {\n\n\n    componentDidMount() {\n        axios.delete('http://localhost:4000/ingredients/delete/'+this.props.match.params.id)\n            .then(response => {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n            cogoToast.success('Ingredient deleted!');\n    }\n\n    render() {\n        return (\n            <div>\n                <Link to={\"/\"} style={{marginRight: '1em'}}>Back to list</Link>\n            </div>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nimport AddIngredient from \"./components/add-ingredient.component\";\nimport EditIngredient from \"./components/edit-ingredient.component\";\nimport IngredientsList from \"./components/ingredients-list.component\";\nimport DeleteIngredient from \"./components/delete-ingredient.component\";\n\nimport logo from \"./logo.png\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <a class=\"navbar-brand\" href=\"https://target.com\" target=\"_blank\">\n              <img src={logo} width=\"30\" height=\"30\" alt=\"Target.com\" />\n            </a>\n            <Link to=\"/\" className=\"navbar-brand\">Alicia and Mark's Pantry</Link>\n            <div className=\"collpase navbar-collapse\">\n              <ul className=\"navbar-nav mr-auto\">\n                <li className=\"navbar-item\">\n                  <Link to=\"/\" className=\"nav-link\">Ingredients</Link>\n                </li>\n                <li className=\"navbar-item\">\n                  <Link to=\"/create\" className=\"nav-link\">Add Ingredient</Link>\n                </li>\n              </ul>\n            </div>\n          </nav>\n          <br/>\n          <Route path=\"/\" exact component={IngredientsList} />\n          <Route path=\"/edit/:id\" component={EditIngredient} />\n          <Route path=\"/delete/:id\" component={DeleteIngredient} />\n          <Route path=\"/create\" component={AddIngredient} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}